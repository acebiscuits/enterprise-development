@page "/genres"
@inject MediaLibraryClient ApiClient

<div class="container content">
    <h3 class="text-primary">Genres page</h3>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <p class="text-danger">Error: @_errorMessage</p>
    }

    <button class="btn btn-primary mb-3" @onclick="LoadGenres">Get All Genres</button>

    @if (_genres != null)
    {
        <ul class="list-unstyled">
            @foreach (var genre in _genres)
            {
                <li class="bg-light p-3 rounded mb-2 shadow-sm">
                    <strong>Id:</strong> @genre.Id<br>
                    <strong>Title:</strong> @genre.Title<br>
                    <strong>Artist IDs:</strong>
                    @if (genre.ArtistIds != null && genre.ArtistIds.Any())
                    {
                        <span>@string.Join(", ", genre.ArtistIds)</span>
                    }
                    else
                    {
                        <span>No artists</span>
                    }
                </li>
            }
        </ul>
    }

    <h4 class="text-primary mt-4">Add New Genre</h4>
    <div class="mb-3">
        <input type="text" class="form-control mb-2" placeholder="Title" @bind="_newGenre.Title" />
        <h6 class="text-muted">Artist IDs (comma-separated)</h6>
        <input type="text" class="form-control mb-2" placeholder="e.g., 1,2,3" @bind="_artistIdsInput" />
    </div>

    <button class="btn btn-primary mb-3" @onclick="AddGenre">Add Genre</button>

    <h4 class="text-primary mt-4">Get Genre by ID</h4>
    <h6 class="text-muted">Genre ID</h6>
    <div class="input-group mb-3">
        <input type="number" class="form-control" placeholder="Enter Genre ID" @bind="_genreId" />
        <button class="btn btn-primary" @onclick="() => LoadGenreById(_genreId)">Get Genre by ID</button>
    </div>

    @if (_genre != null)
    {
        <div class="bg-light p-3 rounded mb-3 shadow-sm">
            <strong>Id:</strong> @_genre.Id<br>
            <strong>Title:</strong> @_genre.Title<br>
            <strong>Artist IDs:</strong>
            @if (_genre.ArtistIds != null && _genre.ArtistIds.Any())
            {
                <span>@string.Join(", ", _genre.ArtistIds)</span>
            }
            else
            {
                <span>No artists</span>
            }
        </div>
    }

    <h4 class="text-primary mt-4">Update Genre</h4>
    <div class="mb-3">
        <h6 class="text-muted">Genre ID</h6>
        <input type="number" class="form-control mb-2" placeholder="Enter Genre ID" @bind="_existingGenre.Id" />
        <input type="text" class="form-control mb-2" placeholder="Title" @bind="_existingGenre.Title" />
        <h6 class="text-muted">Artist IDs (comma-separated)</h6>
        <input type="text" class="form-control mb-2" @bind="_artistIdsInput" placeholder="e.g., 1,2,3" />
    </div>

    <button class="btn btn-primary mb-3" @onclick="UpdateGenre">Update Genre</button>

    <h4 class="text-primary mt-4">Delete Genre by ID</h4>
    <h6 class="text-muted">Genre ID</h6>
    <div class="input-group mb-3">
        <input type="number" class="form-control" placeholder="Enter Genre ID" @bind="_deleteGenreId" />
        <button class="btn btn-primary" @onclick="() => DeleteGenreById(_deleteGenreId)">Delete Genre by ID</button>
    </div>
</div>

@code {
    private IEnumerable<GenreDto>? _genres;
    private GenreCreateDto _newGenre = new();
    private GenreDto? _genre;
    private GenreDto _existingGenre = new();
    private string _artistIdsInput = "";
    private int _genreId;
    private int _deleteGenreId;
    private string? _errorMessage;

    private async Task LoadGenres()
    {
        try
        {
            _genres = await ApiClient.GenreAllAsync();
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to load genres: {ex.Message}";
            _genres = null;
        }
    }

    private async Task AddGenre()
    {
        _newGenre.ArtistIds = ParseIds(_artistIdsInput);

        try
        {
            await ApiClient.GenrePOSTAsync(_newGenre);
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to add genre: {ex.Message}";
        }
        finally
        {
            _newGenre = new GenreCreateDto();
            _artistIdsInput = "";
        }
    }

    private List<int> ParseIds(string input)
    {
        return input
            .Split(',', StringSplitOptions.RemoveEmptyEntries)
            .Select(id => int.TryParse(id.Trim(), out var parsedId) ? parsedId : (int?)null)
            .Where(id => id.HasValue)
            .Select(id => id!.Value)
            .ToList();
    }

    private async Task LoadGenreById(int id)
    {
        try
        {
            _genre = await ApiClient.GenreGETAsync(id);
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to load genre by id: {ex.Message}";
        }
    }

    private async Task UpdateGenre()
    {
        try
        {
            var artistIds = _artistIdsInput.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                        .Select(id => int.Parse(id.Trim()))
                                        .ToList();

            _existingGenre.ArtistIds = artistIds;

            await ApiClient.GenrePUTAsync(_existingGenre);
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to update genre: {ex.Message}";
        }
    }

    private async Task DeleteGenreById(int id)
    {
        try
        {
            await ApiClient.GenreDELETEAsync(id);
            _errorMessage = null;
            _deleteGenreId = -1;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to delete genre: {ex.Message}";
        }
    }
}