@page "/"
@inject MediaLibraryClient ApiClient

<div class="container content">
    <h3 class="text-primary">Artists page</h3>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <p class="text-danger">Error: @_errorMessage</p>
    }

    <button class="btn btn-primary mb-3" @onclick="LoadArtists">Get All Artists</button>

    @if (_artists != null)
    {
        <ul class="list-unstyled">
            @foreach (var artist in _artists)
            {
                <li class="bg-light p-3 rounded mb-2 shadow-sm">
                    <strong>Id:</strong> @artist.Id<br>
                    <strong>Name:</strong> @artist.Name<br>
                    <strong>Description:</strong> @artist.Description
                    <br>
                    <strong>Genre IDs:</strong>
                    @if (artist.GenreIds != null && artist.GenreIds.Any())
                    {
                        <span>@string.Join(", ", artist.GenreIds)</span>
                    }
                    else
                    {
                        <span>No genres</span>
                    }
                    <br>
                    <strong>Album IDs:</strong>
                    @if (artist.AlbumIds != null && artist.AlbumIds.Any())
                    {
                        <span>@string.Join(", ", artist.AlbumIds)</span>
                    }
                    else
                    {
                        <span>No albums</span>
                    }
                </li>
            }
        </ul>
    }

    <h4 class="text-primary mt-4">Add New Artist</h4>
    <div class="mb-3">
        <input type="text" class="form-control mb-2" placeholder="Name" @bind="_newArtist.Name" />
        <input type="text" class="form-control mb-2" placeholder="Description" @bind="_newArtist.Description" />
        <h6 class="text-muted">Album IDs (comma-separated)</h6>
        <input type="text" class="form-control mb-2" placeholder="e.g., 1,2,3" @bind="_albumIdsInput" />
        <h6 class="text-muted">Genre IDs (comma-separated)</h6>
        <input type="text" class="form-control mb-2" placeholder="e.g., 1,2,3" @bind="_genreIdsInput" />
    </div>

    <button class="btn btn-primary mb-3" @onclick="AddArtist">Add Artist</button>

    <h4 class="text-primary mt-4">Get Artist by ID</h4>
    <h6 class="text-muted">Artist ID</h6>
    <div class="input-group mb-3">
        <input type="number" class="form-control" placeholder="Enter Artist ID" @bind="_artistId" />
        <button class="btn btn-primary" @onclick="() => LoadArtistById(_artistId)">Get Artist by ID</button>
    </div>

    @if (_artist != null)
    {
        <div class="bg-light p-3 rounded mb-3 shadow-sm">
            <strong>Id:</strong> @_artist.Id<br>
            <strong>Name:</strong> @_artist.Name<br>
            <strong>Description:</strong> @_artist.Description
            <br>
            <strong>Genre IDs:</strong>
            @if (_artist.GenreIds != null && _artist.GenreIds.Any())
            {
                <span>@string.Join(", ", _artist.GenreIds)</span>
            }
            else
            {
                <span>No genres</span>
            }
            <br>
            <strong>Album IDs:</strong>
            @if (_artist.AlbumIds != null && _artist.AlbumIds.Any())
            {
                <span>@string.Join(", ", _artist.AlbumIds)</span>
            }
            else
            {
                <span>No albums</span>
            }
        </div>
    }

    <h4 class="text-primary mt-4">Update Artist</h4>
    <h6 class="text-muted">Artist ID</h6>
    <div class="mb-3">
        <input type="number" class="form-control mb-2" placeholder="Enter Artist ID" @bind="_existingArtist.Id" />
        <input type="text" class="form-control mb-2" placeholder="Name" @bind="_existingArtist.Name" />
        <input type="text" class="form-control mb-2" placeholder="Description" @bind="_existingArtist.Description" />
        <h6 class="text-muted">Album IDs (comma-separated)</h6>
        <input type="text" class="form-control mb-2" @bind="_albumIdsInput" placeholder="e.g., 1,2,3" />
        <h6 class="text-muted">Genre IDs (comma-separated)</h6>
        <input type="text" class="form-control mb-2" @bind="_genreIdsInput" placeholder="e.g., 4,5,6" />
    </div>

    <button class="btn btn-primary mb-3" @onclick="UpdateArtist">Update Artist</button>

    <h4 class="text-primary mt-4">Delete Artist by ID</h4>
    <h6 class="text-muted">Artist ID</h6>
    <div class="input-group mb-3">
        <input type="number" class="form-control" placeholder="Enter Artist ID" @bind="_deleteArtistId" />
        <button class="btn btn-primary" @onclick="() => DeleteArtistById(_deleteArtistId)">Delete Artist by ID</button>
    </div>

    <button class="btn btn-primary mt-3 mb-3" @onclick="LoadArtistsWithMaxAlbumsCount">Get Artists with max albums count</button>

    @if (_artistsWithMaxAlbumsCount != null && _artistsWithMaxAlbumsCount.Any())
    {
        <ul class="list-unstyled">
            @foreach (var artist in _artistsWithMaxAlbumsCount)
            {
                <li class="bg-light p-3 rounded mb-2 shadow-sm">
                    <strong>Id:</strong> @artist.Id<br>
                    <strong>Name:</strong> @artist.Name<br>
                    <strong>Description:</strong> @artist.Description
                    <br>
                    <strong>Genre IDs:</strong>
                    @if (artist.GenreIds != null && artist.GenreIds.Any())
                    {
                        <span>@string.Join(", ", artist.GenreIds)</span>
                    }
                    else
                    {
                        <span>No genres</span>
                    }
                    <br>
                    <strong>Album IDs:</strong>
                    @if (artist.AlbumIds != null && artist.AlbumIds.Any())
                    {
                        <span>@string.Join(", ", artist.AlbumIds)</span>
                    }
                    else
                    {
                        <span>No albums</span>
                    }
                </li>
            }
        </ul>
    }
</div>

@code {
    private IEnumerable<ArtistDto>? _artists;
    private ArtistCreateDto _newArtist = new();
    private ArtistDto? _artist;
    private ArtistDto _existingArtist = new();
    private IEnumerable<ArtistDto>? _artistsWithMaxAlbumsCount;
    private string? _errorMessage;
    private string _albumIdsInput = "";
    private string _genreIdsInput = "";
    private int _artistId;
    private int _deleteArtistId;

    private async Task LoadArtists()
    {
        try
        {
            _artists = await ApiClient.ArtistAllAsync();
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to load artists: {ex.Message}";
            _artists = null;
        }
    }

    private async Task AddArtist()
    {

        _newArtist.AlbumIds = ParseIds(_albumIdsInput);
        _newArtist.GenreIds = ParseIds(_genreIdsInput);

        try
        {
            await ApiClient.ArtistPOSTAsync(_newArtist);
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to add artist: {ex.Message}";
        }
        finally
        {
            _newArtist = new ArtistCreateDto();
            _albumIdsInput = "";
            _genreIdsInput = "";
        }
    }
    private List<int> ParseIds(string input)
    {
        return input
        .Split(',', StringSplitOptions.RemoveEmptyEntries)
        .Select(id => int.TryParse(id.Trim(), out var parsedId) ? parsedId : (int?)null)
        .Where(id => id.HasValue)
        .Select(id => id!.Value)
        .ToList();
    }

    private async Task LoadArtistById(int id)
    {

        try
        {
            _artist = await ApiClient.ArtistGETAsync(id);
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to load artist by id: {ex.Message}";
        }
    }

    private async Task UpdateArtist()
    {

        try
        {
            var albumIds = _albumIdsInput.Split(',', StringSplitOptions.RemoveEmptyEntries)
            .Select(id => int.Parse(id.Trim()))
            .ToList();

            var genreIds = _genreIdsInput.Split(',', StringSplitOptions.RemoveEmptyEntries)
            .Select(id => int.Parse(id.Trim()))
            .ToList();

            _existingArtist.AlbumIds = albumIds;
            _existingArtist.GenreIds = genreIds;

            await ApiClient.ArtistPUTAsync(_existingArtist);
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to update artist: {ex.Message}";
        }
    }

    private async Task DeleteArtistById(int id)
    {
        try
        {
            await ApiClient.ArtistDELETEAsync(id);
            _deleteArtistId = -1;
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to delete artist: {ex.Message}";
        }
    }

    private async Task LoadArtistsWithMaxAlbumsCount()
    {
        try
        {
            _artistsWithMaxAlbumsCount = await ApiClient.MaxAlbumCountAsync();
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to load artists with max albums count: {ex.Message}";
        }
    }
}