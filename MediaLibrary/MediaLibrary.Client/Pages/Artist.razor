@page "/"
@inject MediaLibraryClient ApiClient

<div class="container content">
    <h3 class="text-primary">Artists page</h3>

    <button class="btn btn-primary mb-3" @onclick="LoadArtists">Get All Artists</button>

    @if (!string.IsNullOrEmpty(errorMessageAllArtists))
    {
        <p class="text-danger">Error occurred</p>
    }
    else if (isLoadingAllArtists)
    {
        <p>Loading...</p>
    }
    else if (artists != null)
    {
        <ul class="list-unstyled">
            @foreach (var artist in artists)
            {
                <li class="bg-light p-3 rounded mb-2 shadow-sm">
                    <strong>Id:</strong> @artist.Id<br>
                    <strong>Name:</strong> @artist.Name<br>
                    <strong>Description:</strong> @artist.Description
                    <br>
                    <strong>Genre IDs:</strong>
                    @if (artist.GenreIds != null && artist.GenreIds.Any())
                    {
                        <span>@string.Join(", ", artist.GenreIds)</span>
                    }
                    else
                    {
                        <span>No genres</span>
                    }
                    <br>
                    <strong>Album IDs:</strong>
                    @if (artist.AlbumIds != null && artist.AlbumIds.Any())
                    {
                        <span>@string.Join(", ", artist.AlbumIds)</span>
                    }
                    else
                    {
                        <span>No albums</span>
                    }
                </li>
            }
        </ul>
    }

@code {
    private IEnumerable<ArtistDto>? artists;
    private string? errorMessageAllArtists;
    private bool isLoadingAllArtists = false;

    private async Task LoadArtists()
    {
        isLoadingAllArtists = true;
        errorMessageAllArtists = null;

        try
        {
            artists = await ApiClient.ArtistAllAsync();
        }
        catch (Exception ex)
        {
            errorMessageAllArtists = ex.Message;
        }
        finally
        {
            isLoadingAllArtists = false;
        }
    }
}

    <h4 class="text-primary mt-4">Add New Artist</h4>
    <div class="mb-3">
        <input type="text" class="form-control mb-2" placeholder="Name" @bind="newArtist.Name" />
        <input type="text" class="form-control mb-2" placeholder="Description" @bind="newArtist.Description" />
        <h6 class="text-muted">Album IDs (comma-separated)</h6>
        <input type="text" class="form-control mb-2" placeholder="e.g., 1,2,3" @bind="albumIdsInput" />
        <h6 class="text-muted">Genre IDs (comma-separated)</h6>
        <input type="text" class="form-control mb-2" placeholder="e.g., 1,2,3" @bind="genreIdsInput" />
    </div>

    <button class="btn btn-primary mb-3" @onclick="AddArtist">Add Artist</button>

    @if (!string.IsNullOrEmpty(errorMessageAddingArtist))
    {
        <p class="text-danger">Error occurred</p>
    }
    else if (!string.IsNullOrEmpty(successMessageAddingArtist))
    {
        <p class="text-success">@successMessageAddingArtist</p>
    }

@code {
    private ArtistCreateDto newArtist = new();
    private string albumIdsInput = "";
    private string genreIdsInput = "";
    private string? errorMessageAddingArtist;
    private string? successMessageAddingArtist;

    private async Task AddArtist()
    {
        errorMessageAddingArtist = null;
        successMessageAddingArtist = null;

        newArtist.AlbumIds = ParseIds(albumIdsInput);
        newArtist.GenreIds = ParseIds(genreIdsInput);

        try
        {
            await ApiClient.ArtistPOSTAsync(newArtist);
            successMessageAddingArtist = "Artist added successfully";
        }
        catch (Exception ex)
        {
            errorMessageAddingArtist = ex.Message;
        }
                finally
        {
            newArtist = new ArtistCreateDto();
            albumIdsInput = "";
            genreIdsInput = "";
        }
    }
    private List<int> ParseIds(string input)
    {
        return input
            .Split(',', StringSplitOptions.RemoveEmptyEntries)
            .Select(id => int.TryParse(id.Trim(), out var parsedId) ? parsedId : (int?)null)
            .Where(id => id.HasValue)
            .Select(id => id!.Value)
            .ToList();
    }
}

    <h4 class="text-primary mt-4">Get Artist by ID</h4>
    <h6 class="text-muted">Artist ID</h6>
    <div class="input-group mb-3">
        <input type="number" class="form-control" placeholder="Enter Artist ID" @bind="artistId" />
        <button class="btn btn-primary" @onclick="() => LoadArtistById(artistId)">Get Artist by ID</button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessageArtistById))
    {
        <p class="text-danger">Error occurred</p>
    }
    else if (isLoadingArtistById)
    {
        <p>Loading...</p>
    }
    else if (artist != null)
    {
        <div class="bg-light p-3 rounded mb-3 shadow-sm">
            <strong>Id:</strong> @artist.Id<br>
            <strong>Name:</strong> @artist.Name<br>
            <strong>Description:</strong> @artist.Description
            <br>
            <strong>Genre IDs:</strong>
            @if (artist.GenreIds != null && artist.GenreIds.Any())
            {
                <span>@string.Join(", ", artist.GenreIds)</span>
            }
            else
            {
                <span>No genres</span>
            }
            <br>
            <strong>Album IDs:</strong>
            @if (artist.AlbumIds != null && artist.AlbumIds.Any())
            {
                <span>@string.Join(", ", artist.AlbumIds)</span>
            }
            else
            {
                <span>No albums</span>
            }
        </div>
    }

@code
{
    private ArtistDto? artist;
    private string? errorMessageArtistById;
    private bool isLoadingArtistById = false;
    private int artistId;

    private async Task LoadArtistById(int id)
    {
        isLoadingArtistById = true;
        errorMessageArtistById = null;

        try
        {
            artist = await ApiClient.ArtistGETAsync(id);
        }
        catch (Exception ex)
        {
            errorMessageArtistById = ex.Message;
        }
        finally
        {
            isLoadingArtistById = false;
        }
    }
}

    <h4 class="text-primary mt-4">Update Artist</h4>
    <h6 class="text-muted">Artist ID</h6>
    <div class="mb-3">
        <input type="number" class="form-control mb-2" placeholder="Enter Artist ID" @bind="existingArtist.Id" />
        <input type="text" class="form-control mb-2" placeholder="Name" @bind="existingArtist.Name" />
        <input type="text" class="form-control mb-2" placeholder="Description" @bind="existingArtist.Description" />
        <h6 class="text-muted">Album IDs (comma-separated)</h6>
        <input type="text" class="form-control mb-2" @bind="albumIdsInput" placeholder="e.g., 1,2,3" />
        <h6 class="text-muted">Genre IDs (comma-separated)</h6>
        <input type="text" class="form-control mb-2" @bind="genreIdsInput" placeholder="e.g., 4,5,6" />
    </div>

    <button class="btn btn-primary mb-3" @onclick="UpdateArtist">Update Artist</button>

    @if (!string.IsNullOrEmpty(successMessageUpdateArtist))
    {
        <p class="text-success">@successMessageUpdateArtist</p>
    }
    else if (!string.IsNullOrEmpty(errorMessageUpdateArtist))
    {
        <p class="text-danger">Error occurred: @errorMessageUpdateArtist</p>
    }

@code
{
    private ArtistDto existingArtist = new();
    private string? successMessageUpdateArtist;
    private string? errorMessageUpdateArtist;

    private async Task UpdateArtist()
    {
        successMessageUpdateArtist = null;
        errorMessageUpdateArtist = null;

        try
        {
            var albumIds = albumIdsInput.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                        .Select(id => int.Parse(id.Trim()))
                                        .ToList();

            var genreIds = genreIdsInput.Split(',', StringSplitOptions.RemoveEmptyEntries)
                                        .Select(id => int.Parse(id.Trim()))
                                        .ToList();

            existingArtist.AlbumIds = albumIds;
            existingArtist.GenreIds = genreIds;

            await ApiClient.ArtistPUTAsync(existingArtist);
            successMessageUpdateArtist = "Artist updated successfully!";
        }
        catch (Exception ex)
        {
            errorMessageUpdateArtist = ex.Message;
        }
    }
}

    <h4 class="text-primary mt-4">Delete Artist by ID</h4>
    <h6 class="text-muted">Artist ID</h6>
    <div class="input-group mb-3">
        <input type="number" class="form-control" placeholder="Enter Artist ID" @bind="deleteArtistId" />
        <button class="btn btn-primary" @onclick="() => DeleteArtistById(deleteArtistId)">Delete Artist by ID</button>
    </div>

    @if (!string.IsNullOrEmpty(errorMessageDeleteArtistById))
    {
        <p class="text-danger">Error occurred</p>
    }
    else if (!string.IsNullOrEmpty(successMessageDeleteArtistById))
    {
        <p class="text-success">@successMessageDeleteArtistById</p>
    }

@code
{
    private string? errorMessageDeleteArtistById;
    private string? successMessageDeleteArtistById;
    private int deleteArtistId;

    private async Task DeleteArtistById(int id)
    {
        errorMessageArtistById = null;
        successMessageDeleteArtistById = null;

        try
        {
            await ApiClient.ArtistDELETEAsync(id);
            successMessageDeleteArtistById = $"Artist with ID {id} deleted successfully.";
            deleteArtistId = -1;
        }
        catch (Exception ex)
        {
            errorMessageDeleteArtistById = ex.Message;
        }
    }
}

    <button class="btn btn-primary mt-3 mb-3" @onclick="LoadArtistsWithMaxAlbumsCount">Get Artists with max albums count</button>

    @if (!string.IsNullOrEmpty(errorMessageArtistsWithMaxAlbumsCount))
    {
        <p class="text-danger">Error occurred</p>
    }
    else if (isLoadingArtistsWithMaxAlbumsCount)
    {
        <p>Loading...</p>
    }
    else if (artistsWithMaxAlbumsCount != null)
    {
        <ul class="list-unstyled">
            @foreach (var artist in artistsWithMaxAlbumsCount)
            {
                <li class="bg-light p-3 rounded mb-2 shadow-sm">
                    <strong>Id:</strong> @artist.Id<br>
                    <strong>Name:</strong> @artist.Name<br>
                    <strong>Description:</strong> @artist.Description
                    <br>
                    <strong>Genre IDs:</strong>
                    @if (artist.GenreIds != null && artist.GenreIds.Any())
                    {
                        <span>@string.Join(", ", artist.GenreIds)</span>
                    }
                    else
                    {
                        <span>No genres</span>
                    }
                    <br>
                    <strong>Album IDs:</strong>
                    @if (artist.AlbumIds != null && artist.AlbumIds.Any())
                    {
                        <span>@string.Join(", ", artist.AlbumIds)</span>
                    }
                    else
                    {
                        <span>No albums</span>
                    }
                </li>
            }
        </ul>
    }

    @code {
        private IEnumerable<ArtistDto>? artistsWithMaxAlbumsCount;
        private string? errorMessageArtistsWithMaxAlbumsCount;
        private bool isLoadingArtistsWithMaxAlbumsCount = false;

        private async Task LoadArtistsWithMaxAlbumsCount()
        {
            isLoadingArtistsWithMaxAlbumsCount = true;
            errorMessageArtistsWithMaxAlbumsCount = null;

            try
            {
                artistsWithMaxAlbumsCount = await ApiClient.MaxAlbumCountAsync();
            }
            catch (Exception ex)
            {
                errorMessageArtistsWithMaxAlbumsCount = ex.Message;
            }
            finally
            {
                isLoadingArtistsWithMaxAlbumsCount = false;
            }
        }
    }
</div>