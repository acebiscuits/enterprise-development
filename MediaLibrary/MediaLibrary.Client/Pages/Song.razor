@page "/songs"
@inject MediaLibraryClient ApiClient

<div class="container content">
    <h3 class="text-primary">Songs page</h3>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <p class="text-danger">Error: @_errorMessage</p>
    }

    <button class="btn btn-primary mb-3" @onclick="LoadSongs">Get All Songs</button>

    @if (_songs != null && _songs.Any())
    {
        <ul class="list-unstyled">
            @foreach (var song in _songs)
            {
                <li class="bg-light p-3 rounded mb-2 shadow-sm">
                    <strong>Id:</strong> @song.Id<br>
                    <strong>Name:</strong> @song.Name<br>
                    <strong>Number in Album:</strong> @song.NumberInAlbum<br>
                    <strong>Album Name:</strong> @song.AlbumName<br>
                    <strong>Duration:</strong> @song.Duration.ToString()
                </li>
            }
        </ul>
    }

    <h4 class="text-primary mt-4">Add New Song</h4>
    <div class="mb-3">
        <input type="text" class="form-control mb-2" placeholder="Name" @bind="_newSong.Name" />
        <h6 class="text-muted">Number in album</h6>
        <input type="number" class="form-control mb-2" placeholder="Number in Album" @bind="_newSong.NumberInAlbum" />
        <input type="text" class="form-control mb-2" placeholder="Album Name" @bind="_newSong.AlbumName" />
        <input type="text" class="form-control mb-2" placeholder="Duration (HH:MM:SS)" @bind="_durationInput" />
    </div>

    <button class="btn btn-primary mb-3" @onclick="AddSong">Add Song</button>

    <h4 class="text-primary mt-4">Get Song by ID</h4>
    <h6 class="text-muted">Song ID</h6>
    <div class="input-group mb-3">
        <input type="number" class="form-control" placeholder="Enter Song ID" @bind="_songId" />
        <button class="btn btn-primary" @onclick="() => LoadSongById(_songId)">Get Song by ID</button>
    </div>

    @if (_song != null)
    {
        <div class="bg-light p-3 rounded mb-3 shadow-sm">
            <strong>Id:</strong> @_song.Id<br>
            <strong>Name:</strong> @_song.Name<br>
            <strong>Number in Album:</strong> @_song.NumberInAlbum<br>
            <strong>Album Name:</strong> @_song.AlbumName<br>
            <strong>Duration:</strong> @_song.Duration.ToString()
        </div>
    }


    <h4 class="text-primary mt-4">Update Song</h4>
    <h6 class="text-muted">Song ID</h6>
    <div class="mb-3">
        <input type="number" class="form-control mb-2" placeholder="Enter Song ID" @bind="_existingSong.Id" />
        <input type="text" class="form-control mb-2" placeholder="Name" @bind="_existingSong.Name" />
        <input type="number" class="form-control mb-2" placeholder="Number in Album" @bind="_existingSong.NumberInAlbum" />
        <input type="text" class="form-control mb-2" placeholder="Album Name" @bind="_existingSong.AlbumName" />
        <input type="text" class="form-control mb-2" placeholder="Duration (HH:MM:SS)" @bind="_durationInput" />
    </div>

    <button class="btn btn-primary mb-3" @onclick="UpdateSong">Update Song</button>

    <h4 class="text-primary mt-4">Delete Song by ID</h4>
    <h6 class="text-muted">Song ID</h6>
    <div class="input-group mb-3">
        <input type="number" class="form-control" placeholder="Enter Song ID" @bind="_deleteSongId" />
        <button class="btn btn-primary" @onclick="() => DeleteSongById(_deleteSongId)">Delete Song by ID</button>
    </div>

    <h4 class="text-primary mt-4">Get Ordered Songs By Number In Specific Album</h4>

    <div class="mb-3">
        <input type="text" class="form-control mb-2" placeholder="Album title" @bind="_albumTitle" />
    </div>

    <button class="btn btn-primary mb-3" @onclick="LoadOrderedSongsInSpecificAlbum">Get Ordered Songs In Specific Album</button>

    @if (_orderedSongsInSpecificAlbum != null && _orderedSongsInSpecificAlbum.Any())
    {
        <ul class="list-unstyled">
            @foreach (var song in _orderedSongsInSpecificAlbum)
            {
                <li class="bg-light p-3 rounded mb-2 shadow-sm">
                    <strong>Id:</strong> @song.Id<br>
                    <strong>Name:</strong> @song.Name<br>
                    <strong>Number in Album:</strong> @song.NumberInAlbum<br>
                    <strong>Album Name:</strong> @song.AlbumName<br>
                    <strong>Duration:</strong> @song.Duration.ToString()

                </li>
            }
        </ul>
    }


</div>

@code {
    private IEnumerable<SongDto>? _songs;
    private SongCreateDto _newSong = new();
    private SongDto? _song;
    private SongDto _existingSong = new();
    private IEnumerable<SongDto>? _orderedSongsInSpecificAlbum;
    private string _durationInput = "";
    private int _songId;
    private int _deleteSongId;
    private string _albumTitle = "";
    private string? _errorMessage;

    private async Task LoadSongs()
    {
        try
        {
            _songs = await ApiClient.SongAllAsync();
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to laod songs: {ex.Message}";
            _songs = null;
        }
    }

    private async Task AddSong()
    {
        if (System.TimeSpan.TryParse(_durationInput, out var duration))
        {
            _newSong.Duration = duration;
        }
        else
        {
            _errorMessage = "Invalid duration format. Use HH:MM:SS.";
            return;
        }

        try
        {
            await ApiClient.SongPOSTAsync(_newSong);
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to add song: {ex.Message}";
        }
        finally
        {
            _newSong = new SongCreateDto();
            _durationInput = "";
        }
    }

    private async Task LoadSongById(int id)
    {
        try
        {
            _song = await ApiClient.SongGETAsync(id);
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to laod song by id: {ex.Message}";
        }
    }

    private async Task UpdateSong()
    {
        if (System.TimeSpan.TryParse(_durationInput, out var duration))
        {
            _existingSong.Duration = duration;
        }
        else
        {
            _errorMessage = "Invalid duration format. Use HH:MM:SS.";
            return;
        }

        try
        {
            await ApiClient.SongPUTAsync(_existingSong);
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to update songs: {ex.Message}";
        }
    }

    private async Task DeleteSongById(int id)
    {
        try
        {
            await ApiClient.SongDELETEAsync(id);
            _errorMessage = null;
            _deleteSongId = -1;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to delete songs: {ex.Message}";
        }
    }

    private async Task LoadOrderedSongsInSpecificAlbum()
    {
        try
        {
            _orderedSongsInSpecificAlbum = await ApiClient.SongAll2Async(_albumTitle);
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to laod ordered songs in specific album: {ex.Message}";
            _orderedSongsInSpecificAlbum = null;
        }
    }
}