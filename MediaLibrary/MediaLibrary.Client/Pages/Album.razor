@page "/albums"
@inject MediaLibraryClient ApiClient

<div class="container content">
    <h3 class="text-primary">Albums page</h3>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <p class="text-danger">Error: @_errorMessage</p>
    }

    <button class="btn btn-primary mb-3" @onclick="LoadAlbums">Get All Albums</button>

    
    @if (_albums != null && _albums.Any())
    {
        <ul class="list-unstyled">
            @foreach (var album in _albums)
            {
                <li class="bg-light p-3 rounded mb-2 shadow-sm">
                    <strong>Id:</strong> @album.Id<br>
                    <strong>Artist Id:</strong> @album.ArtistId<br>
                    <strong>Title:</strong> @album.Title<br>
                    <strong>Release Year:</strong> @album.ReleaseDate<br>
                    <strong>Song IDs:</strong> @string.Join(", ", album.SongIds)
                </li>
            }
        </ul>
    }

    <h4 class="text-primary mt-4">Add New Album</h4>
    <div class="mb-3">
        <input type="text" class="form-control mb-2" placeholder="Title" @bind="_newAlbum.Title" />
        <h6 class="text-muted">Artist ID</h6>
        <input type="number" class="form-control mb-2" placeholder="Artist ID" @bind="_newAlbum.ArtistId" />
        <h6 class="text-muted">Release year</h6>
        <input type="number" class="form-control mb-2" placeholder="Release Year" @bind="_newAlbum.ReleaseDate" />
        <h6 class="text-muted">Sons ID</h6>
        <input type="text" class="form-control mb-2" placeholder="e.g., 1,2,3" @bind="_songIdsInput" />
    </div>

    <button class="btn btn-primary mb-3" @onclick="AddAlbum">Add Album</button>

    <h4 class="text-primary mt-4">Get Album by ID</h4>
    <h6 class="text-muted">Album ID</h6>
    <div class="input-group mb-3">
        <input type="number" class="form-control" placeholder="Enter Album ID" @bind="_albumId" />
        <button class="btn btn-primary" @onclick="() => LoadAlbumById(_albumId)">Get Album by ID</button>
    </div>

    @if (_album != null)
    {
        <div class="bg-light p-3 rounded mb-3 shadow-sm">
            <strong>Id:</strong> @_album.Id<br>
            <strong>Artist Id:</strong> @_album.ArtistId<br>
            <strong>Title:</strong> @_album.Title<br>
            <strong>Release Year:</strong> @_album.ReleaseDate<br>
            <strong>Song IDs:</strong> @string.Join(", ", _album.SongIds)
        </div>
    }

    <h4 class="text-primary mt-4">Update Album</h4>
    <h6 class="text-muted">Album ID</h6>
    <div class="mb-3">
        <input type="number" class="form-control mb-2" placeholder="Enter Album ID" @bind="_existingAlbum.Id" />
        <input type="text" class="form-control mb-2" placeholder="Title" @bind="_existingAlbum.Title" />
        <input type="number" class="form-control mb-2" placeholder="Artist ID" @bind="_existingAlbum.ArtistId" />
        <input type="number" class="form-control mb-2" placeholder="Release Year" @bind="_existingAlbum.ReleaseDate" />
        <h6 class="text-muted">Sons IDs</h6>
        <input type="text" class="form-control mb-2" placeholder="e.g., 1,2,3" @bind="_songIdsInput" />
    </div>

    <button class="btn btn-primary mb-3" @onclick="UpdateAlbum">Update Album</button>

    <h4 class="text-primary mt-4">Delete Album by ID</h4>
    <h6 class="text-muted">Album ID</h6>
    <div class="input-group mb-3">
        <input type="number" class="form-control" placeholder="Enter Album ID" @bind="_deleteAlbumId" />
        <button class="btn btn-primary" @onclick="() => DeleteAlbumById(_deleteAlbumId)">Delete Album by ID</button>
    </div>

    <h4 class="text-primary mt-4">Get Albums Released In A Specified Year, Including Info About Album Duration</h4>

    <h6 class="text-muted">Year</h6>
    <div class="input-group mb-3">
        <input type="number" class="form-control" placeholder="Enter Year" @bind="_year" />
    </div>
    <button class="btn btn-primary mb-3" @onclick="() => LoadAlbumsInSpecifiedYear(_year)">Get Albums</button>

    @if (_albumsInSpecifiedYear != null && _albumsInSpecifiedYear.Any())
    {
        <ul class="list-unstyled">
            @foreach (var album in _albumsInSpecifiedYear)
            {
                <li class="bg-light p-3 rounded mb-2 shadow-sm">
                    <strong>Id:</strong> @album.Id<br>
                    <strong>Artist Id:</strong> @album.ArtistId<br>
                    <strong>Title:</strong> @album.Title<br>
                    <strong>Release Year:</strong> @album.ReleaseDate<br>
                    <strong>Song IDs:</strong> @string.Join(", ", album.SongIds)<br>
                    <strong>Duration:</strong> @album.SongsCount
                </li>
            }
        </ul>
    }

    <h4 class="text-primary mt-4">Get Top 5 Albums By Duratiom</h4>

    <button class="btn btn-primary mb-3" @onclick="LoadTop5AlbumsByDuratiom">Get Top 5 Albums By Duration</button>

    @if (_top5AlbumsByDuratiom != null && _top5AlbumsByDuratiom.Any())
    {
        <ul class="list-unstyled">
            @foreach (var album in _top5AlbumsByDuratiom)
            {
                <li class="bg-light p-3 rounded mb-2 shadow-sm">
                    <strong>Id:</strong> @album.Id<br>
                    <strong>Artist Id:</strong> @album.ArtistId<br>
                    <strong>Title:</strong> @album.Title<br>
                    <strong>Release Year:</strong> @album.ReleaseDate<br>
                    <strong>Song IDs:</strong> @string.Join(", ", album.SongIds)
                </li>
            }
        </ul>
    }

    <h4 class="text-primary mt-4">Get Min-Avg-Max Albums Duration</h4>

    <button class="btn btn-primary mb-3" @onclick="LoadMinAvgMaxAlbumsDuration">Get Min-Avg-Max Albums Duration</button>

    @if (_durations != null)
    {
        <div class="bg-light p-3 rounded mb-3 shadow-sm">
            <strong>Min Duration:</strong> @_durations.Min<br>
            <strong>Avg Duration:</strong> @_durations.Avg<br>
            <strong>Max Duration:</strong> @_durations.Max<br>
        </div>
    }
</div>

@code {



 }

@code {
    private IEnumerable<AlbumDto>? _albums;
    private AlbumCreateDto _newAlbum = new();
    private AlbumDto? _album;
    private AlbumDto _existingAlbum = new();
    private IEnumerable<AlbumInfoAndDurationDto>? _albumsInSpecifiedYear;
    private IEnumerable<AlbumDto>? _top5AlbumsByDuratiom;
    private MinAvgMaxDurationDto? _durations;
    private string _songIdsInput = "";
    private string? _errorMessage;
    private int _albumId;
    private int _deleteAlbumId;
    private int _year;

    private async Task LoadAlbums()
    {
        try
        {
            _albums = await ApiClient.AlbumAllAsync();
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to load albums: {ex.Message}";
            _albums = null;
        }
    }

    private async Task AddAlbum()
    {
        _newAlbum.SongIds = ParseIds(_songIdsInput);

        try
        {
            await ApiClient.AlbumPOSTAsync(_newAlbum);
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to add albums: {ex.Message}";
        }
    }

    private List<int> ParseIds(string input)
    {
        return input
            .Split(',', StringSplitOptions.RemoveEmptyEntries)
            .Select(id => int.TryParse(id.Trim(), out var parsedId) ? parsedId : (int?)null)
            .Where(id => id.HasValue)
            .Select(id => id!.Value)
            .ToList();
    }

    private async Task LoadAlbumById(int id)
    {
        try
        {
            _album = await ApiClient.AlbumGETAsync(id);
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to load album: {ex.Message}";
            _album = null;
        }
    }

    private async Task UpdateAlbum()
    {
        _existingAlbum.SongIds = ParseIds(_songIdsInput);

        try
        {
            await ApiClient.AlbumPUTAsync(_existingAlbum);
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to update album: {ex.Message}";
        }
    }

    private async Task DeleteAlbumById(int id)
    {
        try
        {
            await ApiClient.AlbumDELETEAsync(id);
            _deleteAlbumId = -1;
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to delete album: {ex.Message}";
        }
    }

    private async Task LoadAlbumsInSpecifiedYear(int year)
    {
        try
        {
            _albumsInSpecifiedYear = await ApiClient.YearAsync(year);
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to load albums in specific year: {ex.Message}";
            _albumsInSpecifiedYear = null;
        }
    }

    private async Task LoadTop5AlbumsByDuratiom()
    {
        try
        {
            _top5AlbumsByDuratiom = await ApiClient.TopFiveByDurationAsync();
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to load top 5 albums by duration: {ex.Message}";
            _top5AlbumsByDuratiom = null;
        }
    }

    private async Task LoadMinAvgMaxAlbumsDuration()
    {
        try
        {
            _durations = await ApiClient.MinAvgMaxDurationAsync();
            _errorMessage = null;
        }
        catch (Exception ex)
        {
            _errorMessage = $"failed to load min, avg, max albums duration: {ex.Message}";
            _durations = null;
        }
    }
}